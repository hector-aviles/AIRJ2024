35,38d34
< SM_SWIVE_LEFT_1 = 170
< SM_SWIVE_LEFT_2 = 180
< SM_SWIVE_RIGHT_1 = 190
< SM_SWIVE_RIGHT_2 = 200
84,86c80
<     global enable_cruise, enable_follow, max_speed, initial_max_speed
<     global goal_rho_l, goal_theta_l, goal_rho_r, goal_theta_r
<     max_speed = initial_max_speed
---
>     global enable_cruise, enable_follow
88,91d81
<     goal_rho_l   = 481.0
<     goal_theta_l = 2.085
<     goal_rho_r   = 466.0
<     goal_theta_r = 0.99
96,98c86
<     global enable_follow, enable_cruise, max_speed, initial_max_speed
<     global goal_rho_l, goal_theta_l, goal_rho_r, goal_theta_r
<     max_speed = initial_max_speed
---
>     global enable_follow, enable_cruise
100,103d87
<     goal_rho_l   = 481.0
<     goal_theta_l = 2.085
<     goal_rho_r   = 466.0
<     goal_theta_r = 0.99
116,139c100
< 
< def callback_start_swive_left(msg):
<     global start_swive_left, enable_follow, enable_cruise, max_speed
<     global goal_rho_l, goal_theta_l, goal_rho_r, goal_theta_r
<     #start_swive_left = msg.data
<     max_speed = 10
<     goal_rho_l   = 385.0
<     goal_theta_l = 2.37
<     goal_rho_r   = 508.0
<     goal_theta_r = 1.16
<     # if msg.data:
<     #     enable_follow, enable_cruise = False, False
< 
< def callback_start_swive_right(msg):
<     global start_swive_right, enable_follow, enable_cruise, max_speed
<     global goal_rho_l, goal_theta_l, goal_rho_r, goal_theta_r
<     #start_swive_right = msg.data
<     max_speed = 10
<     goal_rho_l   = 514.0
<     goal_theta_l = 1.93
<     goal_rho_r   = 300.0
<     goal_theta_r = 0.57
<     # if msg.data:
<     #     enable_follow, enable_cruise = False, False
---
>     
220c181
<     global max_speed, k_rho, k_theta, k_following, dist_to_car, initial_max_speed
---
>     global max_speed, k_rho, k_theta, k_following, dist_to_car
222,223c183
<     global start_pass_on_left, start_pass_on_right, start_swive_left, start_swive_right
<     global goal_rho_l, goal_theta_l, goal_rho_r, goal_theta_r
---
>     global start_pass_on_left, start_pass_on_right
226d185
<     initial_max_speed = 30
235,242c194,197
<     # goal_rho_l   = 370.0
<     # goal_theta_l = 2.4
<     # goal_rho_r   = 430.0
<     # goal_theta_r = 0.895
<     goal_rho_l   = 481.0
<     goal_theta_l = 2.085
<     goal_rho_r   = 466.0
<     goal_theta_r = 0.99
---
>     goal_rho_l   = 370.0
>     goal_theta_l = 2.4
>     goal_rho_r   = 430.0
>     goal_theta_r = 0.895
244c199
<     print('INITIALIZING BEHAVIORS NODE (SEP 2024)...', flush=True)
---
>     print('INITIALIZING BEHAVIORS NODE...', flush=True)
249d203
<         initial_max_speed = max_speed
268,269d221
<     rospy.Subscriber("/start_swive_left", Bool, callback_start_swive_left)
<     rospy.Subscriber("/start_swive_right", Bool, callback_start_swive_right)
284,285c236,237
<     msg_left_lane  = rospy.wait_for_message('/demo/left_lane' , Float64MultiArray, timeout=10000)
<     msg_right_lane = rospy.wait_for_message('/demo/right_lane', Float64MultiArray, timeout=10000)
---
>     msg_left_lane  = rospy.wait_for_message('/demo/left_lane' , Float64MultiArray, timeout=100)
>     msg_right_lane = rospy.wait_for_message('/demo/right_lane', Float64MultiArray, timeout=100)
299,300d250
<     start_swive_left          = False
<     start_swive_right         = False
334,341d283
<             elif start_swive_left:
<                 state = SM_SWIVE_LEFT_1
<                 start_swive_left = False
<                 print("Starting swive left")
<             elif start_swive_right:
<                 state = SM_SWIVE_RIGHT_1
<                 start_swive_right = False
<                 print("Starting swive right")
395,434d336
<                 pub_change_lane_finshed.publish(True)
<                 state = SM_WAITING_FOR_NEW_TASK
< 
<         #
<         # STATES FOR SWIVING TO LEFT
<         #
<         elif state == SM_SWIVE_LEFT_1:
<             if speed <= 10:
<                 speed = max_speed
<             steering = calculate_turning_steering(0.5, 2.9, speed)
<             if current_y > -1.0:
<                 print("Moving to right to finish swiving to left")
<                 state = SM_SWIVE_LEFT_2 
< 
<         elif state == SM_SWIVE_LEFT_2:
<             if speed <= 10:
<                 speed = max_speed
<             steering = calculate_turning_steering(-1.2, 2.9, speed)
<             if current_y > 1.0 or abs(current_a) < 0.2: # Vehicle has swived to left. Left lane has y=1.5
<                 print("Swive to left finished")
<                 pub_change_lane_finshed.publish(True)
<                 state = SM_WAITING_FOR_NEW_TASK
< 
<         #
<         # STATES FOR SWIVE RIGHT
<         #
<         elif state == SM_SWIVE_RIGHT_1:
<             if speed <=10:
<                 speed = max_speed
<             steering = calculate_turning_steering(-0.5, 2.9, speed)
<             if current_y < 1.0: #Vehicle has moved to the right. Left lane has y = 1.5 and center is around y=0
<                 print("Moving to left to finish swiving to right")
<                 state = SM_SWIVE_RIGHT_2
< 
<         elif state == SM_SWIVE_RIGHT_2:
<             if speed <= 10:
<                 speed = max_speed
<             steering = calculate_turning_steering(1.2, 2.9, speed)
<             if current_y < -1.0 or abs(current_a) < 0.2: #Vehicle has moved to the right lane. Right lane has y=-1.5
<                 print("Swive to right finished")
